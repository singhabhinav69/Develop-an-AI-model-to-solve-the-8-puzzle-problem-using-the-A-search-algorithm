import heapq

# Define the goal state
GOAL_STATE = (1, 2, 3, 4, 5, 6, 7, 8, 0)

# A helper function to find the Manhattan distance for a tile.
def manhattan_distance(state):
    distance = 0
    for i, tile in enumerate(state):
        if tile == 0:
            continue
        target_x, target_y = divmod(tile - 1, 3)  # Goal position of the tile
        current_x, current_y = divmod(i, 3)  # Current position of the tile
        distance += abs(target_x - current_x) + abs(target_y - current_y)
    return distance

# Function to get possible moves (states)
def get_neighbors(state):
    neighbors = []
    zero_pos = state.index(0)
    zero_row, zero_col = divmod(zero_pos, 3)

    # Define the possible moves (up, down, left, right)
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    
    for dr, dc in directions:
        new_row, new_col = zero_row + dr, zero_col + dc
        if 0 <= new_row < 3 and 0 <= new_col < 3:
            # Swap the blank (0) tile with the neighboring tile
            new_zero_pos = new_row * 3 + new_col
            new_state = list(state)
            new_state[zero_pos], new_state[new_zero_pos] = new_state[new_zero_pos], new_state[zero_pos]
            neighbors.append(tuple(new_state))
    
    return neighbors

# A* search algorithm
def a_star_search(start_state):
    # Initialize the open list (priority queue) and closed list
    open_list = []
    closed_list = set()
    
    # We use a heap queue to always expand the state with the lowest f(n)
    heapq.heappush(open_list, (0 + manhattan_distance(start_state), 0, start_state, []))
    
    while open_list:
        # Pop the state with the lowest f(n)
        f, g, current_state, path = heapq.heappop(open_list)
        
        # If the current state is the goal state, return the solution
        if current_state == GOAL_STATE:
            return path + [current_state]
        
        # Mark the current state as explored
        closed_list.add(current_state)
        
        # Explore neighbors
        for neighbor in get_neighbors(current_state):
            if neighbor not in closed_list:
                # Calculate the cost (g) and the heuristic (h)
                new_g = g + 1
                new_h = manhattan_distance(neighbor)
                new_f = new_g + new_h
                
                # Add the neighbor to the open list
                heapq.heappush(open_list, (new_f, new_g, neighbor, path + [current_state]))
    
    return None  # No solution found

# Example usage:
start_state = (1, 2, 3, 4, 5, 6, 7, 0, 8)
solution = a_star_search(start_state)

# Print the solution path (sequence of states)
if solution:
    for step in solution:
        print(step)
else:
    print("No solution found.")
